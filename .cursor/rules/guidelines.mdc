---
description:
globs:
alwaysApply: true
---
# Developer Guidelines for AI Role Player Tutor

## Tech Stack
- **Nuxt 3** (Vue 3, TypeScript) — Main framework
- **Supabase** (auth, backend) — Database and authentication
- **AI SDK (Vercel)** — TypeScript toolkit for AI features
- **OpenAI API** (AI features) — Chat completions with GPT-4 Turbo
- **Tailwind CSS v4** (utility-first styling) — Modern CSS framework
- **ShadCN Vue** (UI components) — Component library with 'U' prefix
- **@nuxt/icon** — Icon system using Lucide icons
- **@nuxt/image** — Optimized image handling
- **@nuxt/fonts** — Font optimization
- **@nuxtjs/mdc** — Markdown component support
- **ESLint** — Code linting with auto-fix
- **Lefthook** — Git hooks for pre-commit linting

## Nuxt Modules Configuration
The project uses these Nuxt modules (configured in `nuxt.config.ts`):
- `@nuxt/eslint` — ESLint integration
- `@nuxt/image` — Image optimization
- `@nuxt/fonts` — Font management
- `@nuxt/scripts` — Script loading
- `@nuxtjs/supabase` — Supabase integration
- `nuxt-mcp` — MCP protocol support
- `shadcn-nuxt` — ShadCN component integration
- `@nuxt/icon` — Icon management with Lucide collection
- `@nuxtjs/mdc` — Markdown component support

## Project Structure
- `components/` — UI components (use ShadCN Vue components, Tailwind for styling)
- `components/ui/` — ShadCN components with 'U' prefix (UCard, UButton, etc.)
- `composables/` — Reusable logic (useAuth, useUser for auth management)
- `layouts/` — App layouts (e.g., `default.vue`, `authorized.vue`)
- `middleware/` — Route guards (e.g., `auth.ts` for authentication)
- `pages/` — App pages (auto-routed, includes cases/[slug].vue pattern)
- `server/api/` — API endpoints with nested structure
  - `cases/` — Case-related endpoints
  - `chats/` — Chat management endpoints
    - `[id]/generate-response.post.ts` — AI response generation
    - `[id]/messages.post.ts` — Message management
    - `[id]/status.patch.ts` — Chat status updates
    - `create.post.ts` — Chat creation
  - `openai-transcribe.post.ts` — AI transcription endpoint
- `server/utils/` — Server utilities (requireAuth, prompts)
- `server/types.ts` — Extended server types
- `database.types.ts` — Auto-generated Supabase types
- `lib/utils.ts` — Utility functions (cn function for class merging)
- `assets/css/` — CSS files (tailwind.css)
- `public/` — Public static files

## Database Structure (Supabase)
The project uses these main tables:
- `agents` — AI agents with prompts and positions
- `cases` — Study cases with dependencies, difficulty levels, and criteria
- `chats` — Chat sessions linking users, cases, and agents

Key relationships:
- Cases can have dependencies (`can_be_done_after`)
- Chats link users to specific cases and agents
- Extended types combine related data (ExtendedChat)

## Icons System (@nuxt/icon)
- Uses **Lucide** icon collection exclusively
- Icon naming patterns:
  - `lucide:icon-name` (e.g., `lucide:clock`, `lucide:x`)
- Usage: `<Icon name="lucide:clock" />` or `<Icon name="i-lucide-arrow-left" />`
- Icons are server-bundled for performance
- Always include `aria-hidden="true"` for decorative icons
- Use semantic sizing classes: `h-4 w-4`, `h-5 w-5`, etc.

## ShadCN Vue Configuration
- **Style**: "new-york" theme
- **Prefix**: "U" (UCard, UButton, UInput, etc.)
- **Base Color**: "zinc"
- **CSS Variables**: enabled
- **Icon Library**: Lucide (configured in components.json)
- **TypeScript**: fully enabled

Available ShadCN components:
- UCard (with UCardHeader, UCardContent, UCardFooter, UCardTitle, UCardDescription)
- UButton (with size and variant props)
- UInput
- ULabel
- UBadge
- UDialog (with all sub-components)
- USheet (with all sub-components)
- UTabs (with UTabsList, UTabsTrigger, UTabsContent)
- UNavigationMenu (with all sub-components)
- UAvatar (with UAvatarImage, UAvatarFallback)

## Authentication Patterns
Use the `useAuth()` composable for all authentication:
```typescript
const {
  signInWithEmail,
  signUp,
  signInWithGoogle,
  signOut,
  isAuthenticated,
  user
} = useAuth();
```

**Authentication Methods:**
- `signInWithEmail(email, password)` — Email/password login
- `signUp(email, password, confirmPassword)` — User registration
- `signInWithGoogle()` — OAuth with Google
- `signOut()` — Clear all auth state

**Auth Guards:**
- Use `auth.ts` middleware for protected routes
- Use `requireAuth()` utility for protected API endpoints

## Component Conventions
- **Case Cards**: Use `CaseCard.vue` for available cases, `LockedCaseCard.vue` for locked ones
- **Difficulty Badges**: Use badge variants based on difficulty level (1-2: default, 3-4: secondary, 5+: destructive)
- **Loading States**: Use spinning icons with `animate-spin` class
- **Hover Effects**: Use `group` and `group-hover:` patterns for interactive cards
- **Link Overlays**: Use absolute positioned NuxtLink for card clickability

## API Patterns
**Protected Routes:**
```typescript
import { requireAuth } from '~/server/utils/requireAuth';

export default defineEventHandler(async (event) => {
  const user = await requireAuth(event);
  // Route logic here
});
```

**Chat API Structure:**
- `POST /api/chats/create` — Create new chat
- `POST /api/chats/[id]/messages` — Add messages
- `POST /api/chats/[id]/generate-response` — Generate AI agent responses
- `PATCH /api/chats/[id]/status` — Update chat status

## Styling Conventions
- **Tailwind Only**: No custom CSS unless absolutely necessary
- **Responsive**: All components adapt to screen sizes automatically
- **Color Scheme**: Use semantic colors (primary, secondary, muted-foreground, destructive)
- **Spacing**: Consistent spacing scale (p-4, mb-6, etc.)
- **Typography**: Use font-weight classes (font-medium, font-semibold, font-bold)

## Utility Functions
- **cn()**: Class name utility combining clsx and tailwind-merge
  ```typescript
  import { cn } from '~/lib/utils';
  // Usage: cn('base-classes', condition && 'conditional-classes')
  ```

## TypeScript Conventions
- **Never use**: `any`, `as`, or `as any`
- **Import types**: Use `import type` for type-only imports
- **Database Types**: Import from `~/server/types` or `~/database.types`
- **AI Message Types**: Use `Message` and `Chat` for chat-related functionality
- **Component Props**: Always define explicit Props interfaces
- **Event Handlers**: Properly type event parameters
- **AI Validation**: Use Zod schemas for AI endpoint input validation

## AI Features Integration

### AI SDK Configuration
- **Framework**: Vercel AI SDK with OpenAI provider
- **Model**: GPT-4 Turbo Preview (`gpt-4-turbo-preview`)
- **API Key**: Stored in runtime config (`OPENAI_API_KEY`)
- **Dependencies**: `ai`, `@ai-sdk/openai`, `zod`

### AI Response Generation
**Endpoint**: `POST /api/chats/[id]/generate-response`

```typescript
// Usage example
const response = await $fetch(`/api/chats/${chatId}/generate-response`, {
  method: 'POST',
  body: {
    userMessage: 'User input text',
  },
});
```

**Context Elements Used:**
- Case story and description
- Agent personality (name, position, prompt)
- Full conversation history
- User's current message

### AI SDK Import Pattern
```typescript
import { generateText } from 'ai';
import { openai } from '@ai-sdk/openai';

// Generate contextual response
const { text } = await generateText({
  model: openai('gpt-4-turbo-preview'),
  system: systemPrompt,
  prompt: userInput,
  maxTokens: 1000,
  temperature: 0.7,
});
```

### Message Types (server/types.ts)
```typescript
// Standardized message structure
export type Message = {
  type: 'user' | 'agent';
  text: string;
  timestamp: string;
};

// Chat with typed messages
export type Chat = Omit<Chat, 'messages'> & {
  messages: Message[];
};
```

### AI Agent Behavior
- **Character Consistency**: Agents stay in character using their `name`, `position`, and `prompt`
- **Context Awareness**: Full access to case story and conversation history
- **Professional Tone**: Maintains supportive, educational responses
- **Error Handling**: Graceful fallbacks for AI generation failures

### Chat Flow with AI
1. User sends message → Stored in database
2. AI generation triggered → Context gathered (case + agent + history)
3. OpenAI generates response → Contextual, character-consistent reply
4. Response saved → Database updated with agent message
5. UI updates → Real-time via Supabase subscriptions

### Additional AI Endpoints
- `POST /api/openai-transcribe` — Audio transcription (existing)
- Basic prompts available in `server/utils/prompts.ts`

### AI Best Practices
- Always validate user input with Zod schemas
- Use proper TypeScript types (`Message`, `Chat`)
- Handle AI generation errors gracefully
- Maintain conversation context for coherent responses
- Use appropriate temperature settings (0.7 for balanced creativity)
- Set reasonable token limits (1000 tokens for responses)

## Scripts & Development
- `npm run dev` — Start development server
- `npm run build` — Build for production
- `npm run preview` — Preview production build
- `npm run lint` — Auto-fix lint issues with ESLint

## Git Hooks (Lefthook)
- Pre-commit: ESLint auto-fix runs on staged files
- Configured in `lefthook.yml`

## Best Practices
- Follow Nuxt 3 and Vue 3 composition API conventions
- Use environment variables via `.env` (see `.env.example`)
- Keep UI/UX clean, modern, and accessible
- Use only packages listed in `package.json`
- Import paths: Use `~/` for root, `@/` for components
- Remove unused variables and imports (ESLint enforced)
- Use composables for shared logic
- Keep code modular with clear separation of concerns

## Nuxt Auto-Imports
Nuxt 3 automatically imports components, composables, and utilities. **No manual imports needed** for:

### Auto-Imported Components
- **ShadCN UI components**: `UCard`, `UButton`, `UInput`, etc. (directly available)
- **Custom components**: All components from `components/` directory
- **Nuxt built-ins**: `NuxtLink`, `NuxtImg`, `Icon`, etc.

### Auto-Imported Composables
- **Custom composables**: `useAuth()`, `useUser()` from `composables/` directory
- **Nuxt composables**: `useState()`, `useFetch()`, `navigateTo()`, etc.
- **Utility functions**: `cn()` from `lib/utils.ts`

### Manual Imports Still Required
```typescript
// External library imports (AI SDK, third-party packages)
import { generateText } from 'ai'
import { openai } from '@ai-sdk/openai'
import { z } from 'zod'

// Type-only imports (always explicit)
import type { Message, Chat } from '~/server/types'
import type { Database } from '~/database.types'

// Server-side imports (in API routes)
import { requireAuth } from '~/server/utils/requireAuth'
```

### Usage Examples (No Imports Needed)
```vue
<template>
  <!-- ShadCN components auto-imported -->
  <UCard>
    <UCardHeader>
      <UCardTitle>Auto-imported Components</UCardTitle>
    </UCardHeader>
    <UCardContent>
      <!-- Custom components auto-imported -->
      <CaseCard :case="selectedCase" />
      <!-- Nuxt components auto-imported -->
      <NuxtLink to="/cases">
        <UButton>
          <!-- Icons auto-imported -->
          <Icon name="lucide:arrow-left" />
          Back to Cases
        </UButton>
      </NuxtLink>
    </UCardContent>
  </UCard>
</template>

<script setup lang="ts">
// Composables auto-imported (no import needed)
const { user, isAuthenticated } = useAuth()
const { cn } = useUtils() // if exposed from lib/utils.ts

// Utilities auto-imported
const currentCase = useState('current-case')
await navigateTo('/dashboard')
</script>
```

## Documentation References
- [Nuxt 3 Documentation](mdc:https:/nuxt.com/docs)
- [AI SDK Documentation](mdc:https:/ai-sdk.dev/docs)
- [OpenAI API Documentation](mdc:https:/platform.openai.com/docs)
- [ShadCN Vue Documentation](mdc:https:/shadcn-vue.com)
- [Tailwind CSS v4](mdc:https:/tailwindcss.com)
- [Supabase Documentation](mdc:https:/supabase.com/docs)
- [Lucide Icons](mdc:https:/lucide.dev)
